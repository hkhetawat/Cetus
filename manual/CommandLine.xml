<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:xi="http://www.w3.org/2001/XInclude"
      xmlns:svg="http://www.w3.org/2000/svg"
      xmlns:mml="http://www.w3.org/1998/Math/MathML"
      xmlns:html="http://www.w3.org/1999/xhtml"
      xml:id="Running-Cetus">
    <title>Running Cetus</title>

    <sect1>
      <title>Quick Start</title>

      <orderedlist numeration="arabic">
        <listitem>
          <para>Locate JAR files for ANTLR and Cetus and add them to your
          CLASSPATH variable. <screenshot>
              <command>$ export
              CLASSPATH=$ANTLR_jar_location:$Cetus_jar_location</command>
            </screenshot></para>
        </listitem>

        <listitem>
          <para>Run Cetus by invoking the driver's main method. <screenshot>
              <command>$ java cetus.exec.Driver [option] [files]</command>
            </screenshot></para>
        </listitem>
      </orderedlist>

      <para>NOTE: The build script (build.sh) or the Ant's buildfiles
      (build.xml) provides a target that encapsulates the above processes to a
      wrapper script called "cetus". See more details in build.sh and
      build.xml. Cetus can simply be run as follows using the script.
      <screenshot>
          <command>$ cetus [option] [files]</command>
        </screenshot></para>

      <para><emphasis>Sample invocations of Cetus</emphasis>: Parallelize
      outermost loops in the input source and insert timing instrumentation
      around the parallelized loops. This command automatically generates, by
      default, OpenMP pragmas for the auto-parallellized loops, and adds
      instrumentation code for the users' convenience. Output source file is
      stored in directory "cetus_output" by default. <screenshot>
          <command>$ cetus -parallelize-loops=2 -profile-loops=4
          test.c</command>
        </screenshot></para>
    </sect1>

<sect1><title>Command Line Options</title>

<sect2><title>Utility</title><para><screen>
<command>-debug_parser_input</command>
    Print a single preprocessed input file before sending to parser and exit

<command>-debug_preprocessor_input</command>
    Print a single pre-annotated input file before sending to preprocessor and exit

<command>-dump-options</command>
    Create file options.cetus with default options

<command>-dump-system-options</command>
    Create system wide file options.cetus with default options

<command>-expand-all-header</command>
    Expand all header file #includes into code

<command>-expand-user-header</command>
    Expand user (non-standard) header file #includes into code

<command>-help</command>
    Print this message

<command>-load-options</command>
    Load options from file options.cetus

<command>-macro</command>
    Sets macros for the specified names with comma-separated list (no space is allowed)
e.g., -macro=ARCH=i686,OS=linux

<command>-outdir=dirname</command>
    Set the output directory name (default is cetus_output)

<command>-parser=parsername</command>
    Name of parser to be used for parsing source file

<command>-preprocessor=command</command>
    Set the preprocessor command to use

<command>-preserve-KR-function</command>
    Preserves K&amp;R-style function declaration

<command>-skip-procedures=proc1,proc2,...</command>
    Causes all passes that observe this flag to skip the listed procedures

<command>-verbosity=N</command>
    Degree of status messages (0-4) that you wish to see (default is 0)

<command>-version</command>
    Print the version information
</screen></para></sect2>

<sect2><title>Analysis</title><para><screen>
<command>-alias=N</command>
    Specify level of alias analysis
      =0 disable alias analysis (assume no alias)
      =1 advanced interprocedural analysis (default)
         Uses interprocedural points-to analysis
      =2 assume no alias when points-to analysis is too conservative
      =3 assume all locations are aliased

<command>-callgraph</command>
    Print the static call graph to stdout

<command>-ddt=N</command>
    Perform Data Dependence Testing
      =1 banerjee-wolfe test (default)
      =2 range test

<command>-parallelize-loops</command>
    Annotate loops with Parallelization decisions
      =1 parallelizes outermost loops (default)
      =2 parallelizes every loop
      =3 parallelizes outermost loops with report
      =4 parallelizes every loop with report

<command>-privatize=N</command>
    Perform scalar/array privatization analysis
      =1 enable only scalar privatization
      =2 enable scalar and array privatization (default)

<command>-range=N</command>
    Specifies the accuracy of symbolic analysis with value ranges
      =0 disable range computation (minimal symbolic analysis)
      =1 enable local range computation (default)
      =2 enable inter-procedural computation (experimental)

<command>-reduction=N</command>
    Perform reduction variable analysis
      =1 enable only scalar reduction analysis (default)
      =2 enable array reduction analysis and transformation
</screen></para></sect2>

<sect2><title>Transform</title><para><screen>
<command>-induction=N</command>
    Perform induction variable substitution
      =1 enable substitution of linear induction variables
      =2 enable substitution of generalized induction variables
      =3 enable insertion of runtime test for zero-trip loops (default)

<command>-normalize-loops</command>
    Normalize for loops so they begin at 0 and have a step of 1

<command>-normalize-return-stmt</command>
    Normalize return statements for all procedures

<command>-profile-loops=N</command>
    Inserts loop-profiling calls
      =1 every loop          =2 outermost loop
      =3 every omp parallel  =4 outermost omp parallel
      =5 every omp for       =6 outermost omp for

<command>-teliminate-branch=N</command>
    Eliminates unreachable branch targets
      =0 disable (default)
      =1 enable
      =2 leave old statements as comments

<command>-tinline=mode=0|1|2|3|4:depth=0|1:pragma=0|1:debug=0|1:foronly=0|1:complement=0|1:functions=foo,bar,...</command>
    (Experimental) Perform simple subroutine inline expansion tranformation
   mode
      =0 inline inside main function (default)
      =1 inline inside selected functions provided in the "functions" sub-option
      =2 inline selected functions provided in the "functions" sub-option, when invoked
      =3 inline according to the "inlinein" pragmas
      =4 inline according to both "inlinein" and "inline" pragmas
   depth
      =0 perform inlining recursively i.e. within callees (and their callees) as well (default)
      =1 perform 1-level inlining 
   pragma
      =0 do not honor "noinlinein" and "noinline" pragmas
      =1 honor "noinlinein" and "noinline" pragmas (default)
   debug
      =0 remove inlined (and other) functions if they are no longer executed (default)
      =1 do not remove the inlined (and other) functions even if they are no longer executed
   foronly
      =0 try to inline all function calls depending on other options (default)
      =1 try to inline function calls inside for loops only 
   complement
      =0 consider the functions provided in the command line with "functions" sub-option (default)
      =1 consider all functions except the ones provided in the command line with "functions" sub-option
   functions
      =[comma-separated list] consider the provided functions. 
      (Note 1: This sub-option is meaningful for modes 1 and 2 only) 
      (Note 2: It is used with "complement" sub-option to determine which functions should be considered.)

<command>-tsingle-call</command>
    Transform all statements so they contain at most one function call

<command>-tsingle-declarator</command>
    Transform all variable declarations so they contain at most one declarator

<command>-tsingle-return</command>
    Transform all procedures so they have a single return statement
</screen></para></sect2>

<sect2><title>Codegen</title><para><screen>
<command>-ompGen=N</command>
    Generate OpenMP pragma
      =1 comment out existing OpenMP pragmas (default)
      =2 remove existing OpenMP pragmas
      =3 remove existing OpenMP and Cetus pragmas
      =4 keep all pragmas

<command>-profitable-omp=N</command>
    Inserts runtime for selecting profitable omp parallel region (See the API documentation for more details)
      =0 disable
      =1 Model-based loop selection (default)
      =2 Profile-based loop selection
</screen></para></sect2>

</sect1>

</chapter>
